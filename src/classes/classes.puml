@startuml AdaChess

title AdaChess

class Game {
  +Board board 
  +colour turn
  +isValidMove(Coordinate move)
  +forbiddenMoves(Coordinate piece)
  +getMoves(Piece piece)
  +Move(Piece piece, Coordinate move)
}

enum colour {
  + white
  + black
}

class Coordinate {
  +Int x
  +Int y
}

class Box {
  +Coordinate coordinate
  +boolean occupied
  +colour colour
  +Piece[] piece
  +isOccupied()
  +reset()
  +setOccupied()
  +getColour()
}

class Board{
  +Box[] boxes
  +Int size
  +populateBoard()
  +printBoard()
}

abstract class Piece {
  +Colour:colour
  +Coordinate:coordinate
  +Type:type
  +getColour()
  +getType()
}
class Pawn implements Piece{
  +Box[] possibleMoves
  +getPossibleMoves()
}

class Bishop implements Piece{
  +Box[] possibleMoves
  +getPossibleMoves()
}

class Rook implements Piece{
  +Box[] possibleMoves
  +getPossibleMoves()
}

class Knight implements Piece{
  +Box[] possibleMoves
  +getPossibleMoves()
}

class Queen implements Piece{
  +Box[] possibleMoves
  +getPossibleMoves()
}

class King implements Piece{
  +Box[] possibleMoves
  +getPossibleMoves()
}

Game *-- Board
Board *-- Box
Box *-- Coordinate
Piece *-- Coordinate
Box *-- colour
Piece *-- colour


@enduml